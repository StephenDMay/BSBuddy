{"version":3,"sources":["./src/app/record-logs/record-logs.component.html","./src/app/record-logs/record-logs.component.ts","./src/environments/environment.ts","./src/app/add-record/add-record.component.ts","./src/app/add-record/add-record.component.html","./src/app/record-by-date/record-by-date.component.html","./src/app/record-by-date/record-by-date.component.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/record/record.component.ts","./src/app/record/record.component.html","./src/app/app-routing.module.ts","./src/app/bs-manager.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["\n<div id=\"recordLogs\">\n<app-record *ngFor=\"let record of records\" [record]=\"record\"></app-record>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BsManagerService } from '../bs-manager.service';\nimport { record } from '../record';\n\n@Component({\n  selector: 'app-record-logs',\n  templateUrl: './record-logs.component.html',\n  styleUrls: ['./record-logs.component.css']\n})\nexport class RecordLogsComponent implements OnInit {\n\n  records : record[];\n\n  constructor(private bsManagerService : BsManagerService) { }\n\n  ngOnInit(): void {\n    this.bsManagerService.getAllRecords().subscribe(list => {\n      this.records = list;\n    });\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { getLocaleDateFormat, Time } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsManagerService } from '../bs-manager.service';\nimport { record } from '../record';\n\n@Component({\n  selector: 'app-add-record',\n  templateUrl: './add-record.component.html',\n  styleUrls: ['./add-record.component.css']\n})\nexport class AddRecordComponent implements OnInit {\n\n    bsValue: number;\n    \n    date: Date;\n    time: Time;\n\n  constructor(private service: BsManagerService, private router : Router) { }\n\n  ngOnInit(): void {\n  }\n\n  addRecord( label : string) {\n    let toAdd : record = {bsValue : this.bsValue, label,  date : new Date, time : this.time}\n    this.service.addRecord(toAdd).subscribe((_) => {this.router.navigate([\"/allrecords\"])});\n\n  }\n\n}\n","<div id=\"addBS\">\n    \n    <span> Value </span>\n    <input type=\"text\" [(ngModel)]=\"bsValue\">\n    <br/>\n    <span> Label </span>\n    <select #labelSelect>\n        <option value=\"beforeBreakfast\">Before Breakfast</option>\n        <option value=\"afterBreakfast\">After Breakfast</option>\n        <option value=\"beforeLunch\">Before Lunch</option>\n        <option value=\"afterLunch\">After Lunch</option>\n        <option value=\"beforeDinner\">Before Dinner</option>\n        <option value=\"afterDinenr\">After Dinner</option>\n        <option value=\"beforeSnack\">Before Snack</option>\n        <option value=\"beforeBed\">Before Bed</option>\n        <option value=\"beforeWorkout\">Before Workout</option>\n        <option value=\"afterWorkout\">After Workout</option>\n    </select>\n    <br/>\n    <!-- <span> Date </span>\n    <input type=\"text\" [(ngModel)]=\"date\">\n    <span> Time </span>\n    <input type=\"text\" [(ngModel)]=\"time\"> -->\n    <button id=\"add\" (click)=\"addRecord(labelSelect.value)\">Add</button>\n    <br/>\n</div>\n","\n\n<div class=\"col\">\n<app-record *ngFor=\"let record of records\" [record]=\"record\"></app-record>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BsManagerService } from '../bs-manager.service';\nimport { record } from '../record';\n\n@Component({\n  selector: 'app-record-by-date',\n  templateUrl: './record-by-date.component.html',\n  styleUrls: ['./record-by-date.component.css']\n})\nexport class RecordByDateComponent implements OnInit {\n\n  records : record[];\n\n  constructor(private bsManagerService : BsManagerService) { }\n\n  ngOnInit(): void {\n    this.bsManagerService.getByDate().subscribe(list => {\n      this.records = list;\n    });\n  }\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'diabetes-tracker';\n}\n","<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Diabetes Tracker</title>\n    \n</head>\n<body id=\"page\">\n    <header>\n        <div id=\"header\">\n            <h1>Welcome to Blood Sugar Buddy!</h1>\n\n\n        </div>\n    </header>\n    \n    <router-outlet></router-outlet>\n    \n</body>\n</html>\n\n\n\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { RecordComponent } from './record/record.component';\nimport {HttpClientModule} from '@angular/common/http';\nimport { RecordLogsComponent } from './record-logs/record-logs.component';\nimport { AddRecordComponent } from './add-record/add-record.component';\nimport {FormsModule} from '@angular/forms';\nimport { RecordByDateComponent } from './record-by-date/record-by-date.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    RecordComponent,\n    RecordLogsComponent,\n    AddRecordComponent,\n    RecordByDateComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, Input, OnInit } from '@angular/core';\nimport { record } from '../record'\n@Component({\n  selector: 'app-record',\n  templateUrl: './record.component.html',\n  styleUrls: ['./record.component.css']\n})\nexport class RecordComponent implements OnInit {\n\n  @Input()record: record;\n  \n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div id=\"singleValue\">\n<p>{{record.bsValue}} {{record.label}} {{record.date}} {{record.time}}</p>\n</div>\n<br/>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AddRecordComponent } from './add-record/add-record.component';\nimport { RecordByDateComponent } from './record-by-date/record-by-date.component';\nimport { RecordLogsComponent } from './record-logs/record-logs.component';\n\nconst routes: Routes = [{path: \"allrecords\", component: RecordLogsComponent},\n{path: \"bloodsugar\", component: AddRecordComponent},\n{path: \"day\", component: RecordByDateComponent}];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, pipe } from 'rxjs';\nimport { record } from './record';\nimport {tap, catchError} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BsManagerService {\n\n  baseUrl : string = \"http://localhost:8080/api\";\n  httpOptions = {headers: new HttpHeaders({\"Content-Type\" : \"application/json\"})}\n\n  constructor(private http : HttpClient) { }\n\n\n  getAllRecords() : Observable<record[]> {\n    return this.http.get<record[]>(this.baseUrl + \"/allrecords\")\n    .pipe(\n      tap(x => console.log(x)),\n      catchError(err => {\n        console.log(err);\n        let empty : record[] = [];\n        return of(empty);\n      })\n      );\n\n  }\n\n  addRecord(toAdd : record) : Observable<record> {\n    console.log(toAdd);\n    return this.http.post<record>(this.baseUrl + \"/bloodsugar\", toAdd, this.httpOptions)\n    .pipe(\n      tap(x => console.log(x)),\n      catchError(err => {\n        console.log(err);\n        return of(null);\n      })\n    );\n\n\n  } \n\n  getByDate() : Observable<record[]> {\n    return this.http.get<record[]>(this.baseUrl + \"/day\")\n    .pipe(\n      tap(x => console.log(x)),\n      catchError(err => {\n        console.log(err);\n        let empty : record[] = [];\n        return of(empty);\n      })\n    );\n\n\n  }\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}